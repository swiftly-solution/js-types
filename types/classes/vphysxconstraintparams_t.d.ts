interface VPhysXConstraintParams_t {
    "Type": number;
    "TranslateMotion": number;
    "RotateMotion": number;
    "Flags": number;
    "Anchor": Object;
    "MaxForce": number;
    "MaxTorque": number;
    "LinearLimitValue": number;
    "LinearLimitRestitution": number;
    "LinearLimitSpring": number;
    "LinearLimitDamping": number;
    "TwistLowLimitValue": number;
    "TwistLowLimitRestitution": number;
    "TwistLowLimitSpring": number;
    "TwistLowLimitDamping": number;
    "TwistHighLimitValue": number;
    "TwistHighLimitRestitution": number;
    "TwistHighLimitSpring": number;
    "TwistHighLimitDamping": number;
    "Swing1LimitValue": number;
    "Swing1LimitRestitution": number;
    "Swing1LimitSpring": number;
    "Swing1LimitDamping": number;
    "Swing2LimitValue": number;
    "Swing2LimitRestitution": number;
    "Swing2LimitSpring": number;
    "Swing2LimitDamping": number;
    "GoalPosition": Vector;
    "GoalAngularVelocity": Vector;
    "DriveSpringX": number;
    "DriveSpringY": number;
    "DriveSpringZ": number;
    "DriveDampingX": number;
    "DriveDampingY": number;
    "DriveDampingZ": number;
    "DriveSpringTwist": number;
    "DriveSpringSwing": number;
    "DriveSpringSlerp": number;
    "DriveDampingTwist": number;
    "DriveDampingSwing": number;
    "DriveDampingSlerp": number;
    "SolverIterationCount": number;
    "ProjectionLinearTolerance": number;
    "ProjectionAngularTolerance": number;
    ToPtr: () => string;
    IsValid: () => boolean;
}

declare function VPhysXConstraintParams_t(ptr_or_class: string|AnySDKClass): VPhysXConstraintParams_t;